@startuml C4_Elements
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

LAYOUT_TOP_DOWN()

Person(operator, "Operator")

System_Boundary(browser, "Browser") {
    Container(ldo_ui, "live-data-operation-ui", "TS React SPA")
}

System_Boundary(hetzner, "Hetzner machine") {
    Container(taf_client, "transfer-agent-filesystem-client", "Java Swing")
}

System_Boundary(aws, "AWS") {
    Container(ldo_api, "live-data-operation-api", "Spring Boot WebMVC", "a.k.a live-data-management-service")
    Container(mds, "bayes-fixtures-backend", "Django", "a.k.a esportsdirectory")
    Container(fd, "fixtures-directory-service", "Spring Boot WebMVC")
    Container(ld_ingestion_replay_parser_csgo, "live-data-ingestion-csgo-transfer-agent-bayes", "Spring Boot", "Configured instance of live-data-ingestion-replay-parser")
    Container(ld_ingestion_replay_parser_dota, "live-data-ingestion-dota-bayes", "Spring Boot", "Configured instance of live-data-ingestion-replay-parser")
    Container(ld_ingestion_purifier_clarity, "live-data-ingestion-purifier-clarity", "Spring Boot", "Configured instance of live-data-ingestion-purifier")
    ContainerDb(ldo_db, "management", "Postgresql")
    ContainerQueue(ld_clients_exchange, "live-data.clients", "RabbitMQ Exchange", "TeamNameChangedEvent, TickedEvent")
    ContainerQueue(ld_clients_in_q, "live-data.clients.in", "RabbitMQ Queue", "TeamNameChangedEvent, TickedEvent")
    ContainerQueue(ld_management_exchange, "live-data.management", "RabbitMQ Exchange", "StartParseMessage")
    ContainerQueue(ld_management_dota_client_q, "live-data.management.${dota-client-id}", "RabbitMQ Queue", "StartParseMessage")
    ContainerQueue(ld_management_csgo_client_q, "live-data.management.${csgo-client-id}", "RabbitMQ Queue", "StartParseMessage")
    ContainerQueue(ld_clarity_ingestion_exchange, "live-data.clarity.ingestion", "RabbitMQ Exchange", "IngestionMessage")
    ContainerQueue(ld_clarity_ingestion_dota_dedup_q, "live-data.dota2-bayes-clarity.dedup.in", "RabbitMQ Queue", "IngestionMessage")
    ContainerQueue(ld_clarity_ingestion_csgo_dedup_q, "live-data.csgo-bayes-clarity.dedup.in", "RabbitMQ Queue", "IngestionMessage")
}

Rel(operator, ldo_ui, "uses", "HTTP")
Rel_D(operator, taf_client, "starts tranfer-agent client", "Remote Desktop")
Rel(ldo_ui, ldo_api, "displays/creates data", "HTTP")
Rel_U(ldo_api, ldo_ui, "Sends events to", "STOMP WebSocket")
Rel(ldo_api, mds, "fetches data", "HTTP")
Rel(ldo_api, ldo_db, "Reads/Writes", "JDBC Driver")
Rel(ldo_api, ld_management_exchange, "publishes with rkey client id from header of clients.in q messages", "AMQP Json")
Rel(ld_management_exchange, ld_management_csgo_client_q, "routes messages with rkey csgo client id", "RabbitMQ Binding")
Rel(ld_management_exchange, ld_management_dota_client_q, "routes messages with rkey dota client id", "RabbitMQ Binding")
Rel(ldo_api, ld_clients_in_q, "consumes", "AMQP Json")
Rel(ld_clients_exchange, ld_clients_in_q, "binds to", "RabbitMQ Binding")
Rel(ldo_api, fd, "fetches data", "HTTP")
Rel_U(ld_ingestion_replay_parser_dota, ld_management_dota_client_q, "consumes", "AMQP Json")
Rel(ld_ingestion_replay_parser_dota, ld_clarity_ingestion_exchange, "publishes with rkey dota2:bayes-clarity", "AMQP Json")
Rel(ld_ingestion_replay_parser_dota, ld_clients_exchange, "publishes with generated client id as header", "AMQP Json")
Rel_U(ld_ingestion_replay_parser_csgo, ld_management_csgo_client_q, "consumes", "AMQP Json")
Rel(ld_ingestion_replay_parser_csgo, ld_clarity_ingestion_exchange, "publishes with rkey csgo:bayes-clarity", "AMQP Json")
Rel(ld_ingestion_replay_parser_csgo, ld_clients_exchange, "publishes with generated client id as header", "AMQP Json")
Rel(ld_clarity_ingestion_exchange, ld_clarity_ingestion_dota_dedup_q, "routes messages with key dota2:bayes-clarity", "RabbitMQ Binding")
Rel(ld_clarity_ingestion_exchange, ld_clarity_ingestion_csgo_dedup_q, "routes messages with key csgo:bayes-clarity", "RabbitMQ Binding")
Rel_U(ld_ingestion_purifier_clarity, ld_clarity_ingestion_csgo_dedup_q, "consumes", "AMQP Json")
Rel_U(ld_ingestion_purifier_clarity, ld_clarity_ingestion_dota_dedup_q, "consumes", "AMQP Json")
Rel_U(taf_client, ld_ingestion_replay_parser_dota, "transfers recorded byte chunks", "WebSocket")
Rel_U(taf_client, ld_ingestion_replay_parser_csgo, "transfers recorded byte chunks", "WebSocket")

@enduml